<snippet>
	<content><![CDATA[
struct ele{
    ll cnt;
    ll min_ele;
};

struct seg_not_lazy{
    ll sz=1;
 
    vector<ele> t;
    // 1 based indexing segtree //
    // 0 based indexing array //
 
    ll ide=1e15;
    ele opr(ele a,ele b){
        if(a.min_ele<b.min_ele)
            return a;
        if(b.min_ele<a.min_ele)
            return b;
        return {a.cnt+b.cnt, a.min_ele};
    }
 
    void init(ll n){
        while(sz<n) sz*=2;
        t.assign(2*sz,{ide});
    }
 
    void build(vector<ll> &a, ll v, ll tl, ll tr) {
        if (tl == tr) {
            if(tl <= a.size()) t[v] = {1,a[tl - 1]};
        } else {
            ll tm = (tl + tr) / 2;
            build(a, v*2, tl, tm);
            build(a, v*2+1, tm+1, tr);
            t[v] =  opr (t[v*2] , t[v*2+1]);
        }
    }
 
    void build(vector<ll> &a){
        build(a,1,1,sz);
    }

 
    void update(ll v, ll tl, ll tr, ll l, ll r, ll addend) {
        if (l > r) 
            return;
        if (l == tl && tr == r) {
            t[v] = {1,addend};
        } else {
            ll tm = (tl + tr) / 2;
            update(v*2, tl, tm, l, min(r, tm), addend);
            update(v*2+1, tm+1, tr, max(l, tm+1), r, addend);
            t[v] = opr(t[v*2], t[v*2+1]);
        }
    }
 
    void update(ll l, ll r, ll addend){
        update(1, 1, sz, l, r, addend);
    }
 
    ele query(ll v, ll tl, ll tr, ll l, ll r) {
        if (l > r)
            return {0,ide};
        if (l == tl && tr == r)
            return t[v];
        ll tm = (tl + tr) / 2;
        return opr(query(v*2, tl, tm, l, min(r, tm)), 
                   query(v*2+1, tm+1, tr, max(l, tm+1), r));
    }
 
    ele query(ll l, ll r){
        return query(1, 1, sz, l, r);
    }
 
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree_not_lazy</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
